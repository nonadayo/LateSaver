// 時間を17:01などの形式で管理するためのクラス
// 演算機能とかを持ってる
export default class Time {
    hours: number;
    minutes: number;

    // 引数: 時間, 分を渡す
    constructor(hours?: number, minutes?: number) {
        if (hours !== undefined && minutes !== undefined) {
            this.hours   = hours;
            this.minutes = minutes;
        } else {
            const now    = new Date();
            this.hours   = now.getHours();
            this.minutes = now.getMinutes()
        }
    }


    /////////////////////////////////////////////////////////////////////////////////
    // 取得関数群
    /////////////////////////////////////////////////////////////////////////////////
    // 時間のフォーマットで文字列を作成する関数
    // 引数:   無
    // 戻り値: "17:00"などの文字列
    getStr(): string {
        if (this.minutes < 10) {
            return `${this.hours}:0${this.minutes}`;
        } else {
            return `${this.hours}:${this.minutes}`;
        }
    }

    // 時間, 分を分に変換する関数
    // 引数: 無
    // 戻り値: 分
    getValAsMin(): number {
        return this.hours * 60 + this.minutes;
    }
    // インスタンスをコピーする関数
    // 引数: 無
    // 戻り値: Timeインスタンス
    copy(): Time {
        return new Time(this.hours, this.minutes);
    }
    /////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////






    /////////////////////////////////////////////////////////////////////////////////
    // 演算関数群
    /////////////////////////////////////////////////////////////////////////////////
    // 指定されたTimeからの単純差を計算する関数
    // 引数: Timeインスタンス
    // 戻り値: Timeインスタンス
    differFrom(time: Time) {
        const hoursDiff: number = this.hours - time.hours;
        const minDiff:   number = this.minutes - time.minutes;
        return new Time(hoursDiff, minDiff);
    }
    // 分を足す関数
    // 引数: 足したい分数
    // 戻り値: なし
    addMin(min: number): void {
        this.minutes += min;
        while(this.minutes >= 60) {
            this.hours++;
            if (this.hours >= 24) {
                this.hours = 0;
            }
            this.minutes -= 60;
        }
    }
    /////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////






    /////////////////////////////////////////////////////////////////////////////////
    // 判定関数群
    /////////////////////////////////////////////////////////////////////////////////
    // 比較関数
    // 引数: Timeインスタンス
    // 戻り値: this > timeなら正, this == timeなら0, this < timeなら負の値を返す
    compareTo(time: Time): number {
        const differTime: Time = this.differFrom(time);
        return differTime.getValAsMin();
    }
    /////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////
}